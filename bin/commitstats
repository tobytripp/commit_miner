#!/usr/bin/env ruby -KU

#=Synopsis
#   Gather statistics from git diff data, Jira reports, and Cruise Control
#
#=Usage
#   commitstats [options]
# 
# OPTIONS
#   -h --help :: Print this message
# 
#   -s --since DATE :: Tell git to go back to DATE when gathering log data.
#
#   -r --report REPORT :: Run the specified report.
#
#   -n --no-mining :: Do not run the miners, only run reports.
#
#   -l --list-reports :: List the available reports to run.
#
#   -v --verbose :: Run with additional output
#
#
#=LICENSE
# Copyright (c) 2009  Toby Tripp
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# For running in development
if File.directory?( File.expand_path( File.dirname(__FILE__) + "/../lib" ) )
  require "rubygems"
  $LOAD_PATH.unshift File.expand_path( File.dirname(__FILE__) + "/../lib" )
end

begin
  require 'commit_stats'
rescue LoadError
  require "rubygems"
  require "commit_stats"
end

require "rdoc/usage"
require "optparse"

if __FILE__ == $PROGRAM_NAME
  since_date  = nil
  report_only = false
  run_report  = :tests_and_cowboys
  log_level   = Logger::WARN
  list_reports = false

  opts = OptionParser.new
  opts.on( "-h", "--help" )          { RDoc::usage 1, "Synopsis", "Usage" }
  opts.on( "-s", "--since  DATE" )   { |date|   since_date = date }
  opts.on( "-r", "--report REPORT" ) { |report| run_report = report }
  opts.on( "-n", "--no-mining" )     { report_only = true }
  opts.on( "-l", "--list-reports" )  { list_reports = true }
  opts.on( "-v", "--verbose" )       { log_level = Logger::DEBUG }
  opts.parse!( ARGV ) rescue RDoc::usage( 'usage' )

  if list_reports
    puts CommitStats::Report.available_reports.sort.join( ", " )
    exit 0
  end
  
  report = CommitStats::Report.new(
    :since_date  => since_date,
    :report_only => report_only,
    :log_level   => log_level
  )
  
  report.generate
  puts report.run( run_report ).to_csv
end
